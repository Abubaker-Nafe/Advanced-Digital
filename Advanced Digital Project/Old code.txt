module Counter(clk,reset,count);
	input clk,reset;
	output [4:0] count;
	reg TA,TB,TC,TD,TE;
	
	//assign TA = (~count[4] & count[3] & count[2] & ~count[1] & count[0]) + (count[4] & count[3] & count[2] & count[1] & count[0]);//T4 
			
	//assign TB = (~count[3] & count[2] & count[1] & count[0]) + (count[4] & count[2] & count[1] & count[0]) + (~count[4] & count[3] & count[2] & ~count[1] & count[0]);	 
			
	//assign TC =	(~count[4] & ~count[3] & count[1] & count[0]) +	(~count[4] & ~count[2] & count[1] & count[0]) + (~count[3] & ~count[2] & count[1] & count[0])
	//+ (~count[4] & count[3] & count[2] & ~count[1] & count[0]) + (count[4] & count[3] & count[2] & count[1] & count[0]);  
			
	//assign TD = (~count[4] & ~count[2] & count[1] & count[0]) + (~count[4] & ~count[3] & count[2] & ~count[1] & count[0]) + (count[4] & ~count[3] & ~count[2] & ~count[1] & count[0])
	//+ (count[4] & ~count[3] & count[2] & count[1] & count[0]) + (count[4] & count[3] & count[2] & ~count[1] & count[0]);
			
	//assign TE =  (~count[4] & ~count[3] & ~count[2] & count[1] & ~count[0]) + (count[4] & count[3] & count[2] & count[1] & count[0]);
	
	assign TA = count[4] + count[0];
	assign TB = count[0] + ~count[0];
	assign TC = count[3] + ~count[0];
	assign TD = count[2] + ~count[0];
	assign TE = count[1] + ~count[0];
	
	
	//assign TA = count[1];
	//assign TB = count[4];
	//assign TC = count[3];
	//assign TD = count[2];
	//assign TE = count[1];

	//always @* begin
	//if(Enable == 1) begin
//		if(select == 0) begin//prime numbers	 
	//		if(direction == 1) begin

	//end
	//end	
	//end
	//end
	
    T_FlipFlop T4 (.T(TA), .clk(clk), .reset(reset), .Q(count[0]));
    T_FlipFlop T3 (.T(TB), .clk(clk), .reset(reset), .Q(count[1]));
    T_FlipFlop T2 (.T(TC), .clk(clk), .reset(reset), .Q(count[2]));
    T_FlipFlop T1 (.T(TD), .clk(clk), .reset(reset), .Q(count[3]));
    T_FlipFlop T0 (.T(TE), .clk(clk), .reset(reset), .Q(count[4]));
	
endmodule
	

//____________________________________________________________________________________________________________________________________________________

module T_FlipFlop(T,clk,reset,Q);
	input T,clk,reset;
	output reg Q;
	
	always @(posedge clk) begin
		if(!reset)
			Q = 2;
		else
			Q = T^Q;
		end
		
endmodule
	

module Counter_Testbench;
    reg clk, reset, select, direction, Enable;
    wire [4:0] count;

    Counter counter(clk, reset, select, direction, Enable, count);

    // Clock generation
    always #5 clk = ~clk;

    // Testbench stimuli
    initial begin
        clk = 0;
        reset = 0;
		
        
        #10 reset = 1;  // Assert reset
        #20 reset = 0;  // Deassert reset, start counting
		
        select = 0;

        #100; // Wait for desired number of cycles
        
        $finish; // End simulation
    end
endmodule